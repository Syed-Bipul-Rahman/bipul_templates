import 'package:connectivity_plus/connectivity_plus.dart';
import 'home_model.dart';
import 'home_repository.dart';
import 'local_data_source.dart';
import 'remote_data_source.dart';

class HomeRepositoryImpl implements HomeRepository {
final HomeRemoteDataSource remoteDataSource;
final HomeLocalDataSource localDataSource;
final Connectivity connectivity;

HomeRepositoryImpl({
required this.remoteDataSource,
required this.localDataSource,
required this.connectivity,
});

@override
Future<List<HomeModel>> getItems(int page, int limit) async {
    final connectivityResult = await connectivity.checkConnectivity();
    if (connectivityResult == ConnectivityResult.none) {
    return localDataSource.getCachedItems();
    } else {
    final items = await remoteDataSource.getItems(page, limit);
    await localDataSource.cacheItems(items);
    return items;
    }
    }
    }

    final homeRepositoryProvider = Provider<HomeRepository>(
        (ref) => HomeRepositoryImpl(
        remoteDataSource: ref.read(homeRemoteDataSourceProvider),
        localDataSource: ref.read(homeLocalDataSourceProvider),
        connectivity: Connectivity(),
        ),
        );